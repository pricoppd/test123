Plan on a Page — Container Image Build & ADO Build Agents
Objective

Stabilise and standardise the container image build process and Azure DevOps (ADO) build agents, eliminating internet installs, reducing Nexus friction, and moving to a single supported standard ADO container image with clear ownership.

Current Status (snapshot)

Builds: Old image process still used; pulls some tools from the internet (not in Nexus).

Nexus: Tool onboarding is slow/confusing; blocks reproducible builds.

Registry/AKS: ACR used for builds had Public Network Access = Disabled; not used by new AKS clusters. New ACRs would face the same issue without configuration changes.

Agents: Migrating agent pools from old AKS to new AKS is in progress. Old clusters to be decommissioned when migration completes to get a clean view of images/versions in use.

Target State

One blessed, versioned “Standard ADO Container Image” (LTS + monthly patch).

No internet egress during builds; all tools come from Nexus/ACR.

Clear support boundary: teams must base on the standard image; custom additions are team-owned.

Modern pipeline: cache, SBOM, image signing, vulnerability scanning, provenance.

Workstreams & Tasks (Epics → Stories)
Epic A — Agent Pools & AKS/ACR Foundations

Inventory current agents

Story: List all agent pools, namespaces, images, tags, versions.

Accept: Spreadsheet/report of pools → images → consuming pipelines.

Complete agent migration to new AKS

Story: Move remaining pools; smoke test pipelines; rollback plan documented.

Accept: 100% pools on new AKS; success rate ≥99%.

Decommission old AKS clusters

Story: Drain & delete nodes; remove DNS/Ingress; archive configs.

Accept: Old clusters removed; runbook updated.

ACR alignment

Story: Select the production ACR; enable network access appropriately (private endpoints, firewall rules, AKS pull permissions).

Accept: New AKS pulls from designated ACR; PNA & firewall configured; RBAC in place.

Epic B — Tooling Discovery & Standard Image Definition

Usage analysis

Story: Mine agent images & pipelines to find most-used tools and versions.

Accept: Top-20 tools list with versions + consumers.

Support matrix

Story: Propose “Standard Image v1” toolset + version policy (LTS, monthly patch, emergency CVE).

Accept: Signed off by Platform/Security/Key app teams.

Support boundary

Story: Document “what we support” vs “team-owned customisations” (+ escalation path).

Accept: Published support policy.

Epic C — Standard Image Build & Supply Chain

Reproducible build pipeline (YAML)

Story: Build from Dockerfile using only Nexus/ACR sources; no internet egress.

Accept: Pipeline fails if network egress occurs; uses internal mirrors.

SBOM & Signing

Story: Generate SBOM; sign images; push to ACR with provenance labels.

Accept: SBOM stored; image signed; verification step in pipeline.

Security scanning

Story: Container scan gate (e.g., Trivy/Defender) with thresholds.

Accept: Releases blocked on High/Critical unless exception approved.

Tagging & lifecycle

Story: Tags (v1.x, yyyy-mm), retention policy, roll-forward/rollback playbook.

Accept: Policy documented; automation implemented.

Epic D — Nexus Governance & Enablement

Fast-path onboarding for tools

Story: Define “golden sources,” packaging templates, and a 48–72h SLA lane for common tools.

Accept: Runbook + templates published; owners named.

Mirrors & proxies

Story: Set up internal mirrors (PyPI, npm, Maven) via Nexus to reduce one-off requests.

Accept: Pipelines consume mirrors only; success rate tracked.

Access & reliability

Story: Service accounts, repo layout, permissions, monitoring/alerts for Nexus.

Accept: Fewer incidents; MTTR < 30 min.

Epic E — Adoption, Docs & Communications

Reference repo & sample pipeline

Story: Example ADO pipeline consuming the standard image.

Accept: Builds green; used by at least 3 pilot teams.

How-to docs

Story: “Build with the Standard Image,” “Add your own tool,” “Request a new tool,” FAQs.

Accept: Docs published; link in org handbook.

Change management

Story: Announce support boundary and migration dates; office hours.

Accept: ≥80% adoption by date; feedback captured.

Milestones

M1 (2 wks): Agents fully on new AKS; ACR connectivity fixed; tooling usage report.

M2 (4–5 wks): Standard Image v1 defined & built with SBOM/signing; pilot pipelines live.

M3 (8–10 wks): 80% of builds on Standard Image; old AKS decommissioned; Nexus fast-path running.

Roles

Owner/PM: Name

Platform/AKS/ACR: Name

Security: Name

Nexus/Packaging: Name

Developer Champions (pilot teams): Names

Success Metrics

0 internet egress during builds.

≥95% build success, p50 duration ↓ 20%.

Time to add/update common tool via Nexus ≤ 3 days.

80% pipelines on Standard Image within target window.

Risks & Mitigations

Nexus delays: create fast-path & pre-mirrors.

Edge cases needing custom tools: enforce support boundary; document sidecar/custom layer pattern.

Registry/network misconfig: IaC policies & automated checks in pipeline.

Immediate Next Actions (this week)

Finish agent pool migration & confirm AKS↔ACR pulls.

Run tooling usage scan; publish Top-20 tools list.

Draft Standard Image v1 (toolset + versions) for sign-off.

Stand up the image pipeline (no egress, SBOM, signing) against the chosen ACR.

Publish the support boundary & pilot plan.

If you want, I can turn these into a Jira-ready backlog (epics, stories, acceptance criteria) in your preferred format.

You said:
yes please
ChatGPT said:

Awesome—here’s a Jira-ready backlog with epics, stories, and clear acceptance criteria. It’s written so you can copy/paste into Jira (use the CSV block at the end if you prefer bulk import).

Epics

EPIC A — Agent Pools & AKS/ACR Foundations
Stabilise infra, finish migrations, and make AKS⇄ACR work reliably.

EPIC B — Tooling Discovery & Standard Image Definition
Find what tools/versions are used and define the blessed “Standard ADO Container Image v1”.

EPIC C — Standard Image Build & Supply Chain
Build, sign, scan, and publish the standard image; no internet egress.

EPIC D — Nexus Governance & Enablement
Make getting tools into Nexus predictable, fast, and well-documented.

EPIC E — Adoption, Docs & Communications
Docs, pilots, and org-wide rollout with a clear support boundary.

Stories (with Acceptance Criteria)
EPIC A — Agent Pools & AKS/ACR Foundations

A1. Inventory all agent pools and images (5 pts)

As a platform engineer, I need a complete inventory of agent pools, images, and versions so that we know what’s in use.

AC:

Report lists: pool → cluster/namespace → image repo:tag → consuming pipelines.

Stored in repo (/ops/inventory/agent-pools.json) and shared in Teams/Confluence.

A2. Migrate remaining agent pools to new AKS clusters (8 pts)

AC:

100% pools running on new AKS; smoke tests for top 10 pipelines pass.

Rollback plan documented; no pipeline blocked >2h during cutover.

A3. Configure ACR for build use (5 pts)

AC:

Selected prod ACR has network path that works with new AKS (private endpoint or firewall rules defined).

AKS can pull from ACR (managed identity or SPN with “AcrPull” role).

“Public network access” setting reviewed and justified; documented.

A4. Decommission legacy AKS clusters (3 pts)

AC:

Nodes drained, clusters deleted, DNS/ingress cleaned up, secrets rotated if required.

Runbook updated; cost centre no longer charged.

EPIC B — Tooling Discovery & Standard Image Definition

B1. Gather tool/version usage across agents & pipelines (5 pts)

AC:

Top 20 tools + versions identified from Dockerfiles/pipelines/agent images.

Consumers mapped; stored as tools-usage.md and CSV.

B2. Propose Support Matrix for Standard Image v1 (5 pts)

AC:

Matrix lists tool, exact version, update cadence (monthly LTS patch), and owner.

Sign-off from Platform + Security + 2 pilot teams.

B3. Define Support Boundary & Escalation (3 pts)

AC:

Policy doc published: “We support the standard image. Any tool outside it is customer-owned to extend.”

Includes approved patterns: multi-stage Dockerfile, sidecar, or layer on top.

EPIC C — Standard Image Build & Supply Chain

C1. Create reproducible Dockerfile & ADO pipeline (no internet egress) (8 pts)

AC:

Pipeline fails if external egress occurs; all packages come from Nexus/ACR.

Builds on commit to main; produces immutable digest.

C2. SBOM generation & Image signing (5 pts)

AC:

SBOM generated (e.g., Syft) and stored with build artifact.

Image signed (e.g., Cosign); verification step exists in pipeline.

C3. Vulnerability scanning gate (5 pts)

AC:

Scan runs on each build (e.g., Trivy/Defender).

Critical/High block release unless approved exception; results posted to PR.

C4. Tagging, retention, and rollback policy (3 pts)

AC:

Tags: v1.x, YYYY-MM, and digest; retention documented; rollback playbook tested.

C5. Publish “Standard ADO Container Image v1” to ACR (3 pts)

AC:

Image available at canonical path acr.io/ado/standard:v1.x.

Pulls verified from new AKS agents.

EPIC D — Nexus Governance & Enablement

D1. Define fast-path for common tools (5 pts)

AC:

Template/process reduces lead time to ≤3 business days for pre-approved tools.

Ownership table for who packages what; SLAs agreed.

D2. Configure internal mirrors (npm, PyPI, Maven) via Nexus (8 pts)

AC:

Pipelines consume only internal mirrors; egress blocked.

Monitored with alerting; mirror availability ≥99.9%.

D3. Nexus repo layout, access & reliability (5 pts)

AC:

Clean repo structure (dev/stage/prod); service accounts with least privilege.

Runbook for unlocks/outages; MTTR < 30 min trend.

EPIC E — Adoption, Docs & Communications

E1. Reference repo using the standard image (3 pts)

AC:

Public (internal) sample with YAML pipeline and Makefile.

Builds green; demonstrates cache, SBOM, signing, scanning.

E2. How-to Documentation (5 pts)

AC:

“Use the Standard Image,” “Add your own tool,” “Request a tool in Nexus,” FAQs.

Linked from org handbook; reviewed by pilots.

E3. Pilot migrations (3 teams) (8 pts)

AC:

Three representative services build successfully with the standard image.

Feedback logged; at least two issues fixed.

E4. Org announcement & support boundary comms (3 pts)

AC:

Email/Teams post + office hours scheduled; sunset date for legacy images announced.

≥80% of teams acknowledge plan.

Milestones (for Jira versions)

M1 (2 weeks): A2, A3, B1 done.

M2 (5 weeks): B2, C1–C3, E1 pilots running.

M3 (8–10 weeks): C5, D1–D3, E2–E4; legacy decom’d (A4).

Definition of Done (applies to all stories)

Code/config in Git with review; pipeline green.

Runbook/docs updated.

Security checks pass; owners assigned.

Metrics added where relevant (success rate, scan results).

##################################################################################################################

Plan on a Page — Container Image Build & ADO Agents
Goal

Get to one reliable, supported container image for Azure DevOps builds, no internet installs, and a clean setup on the new AKS/ACR.

Where we are now

We’re still using the old image process, which pulls some tools from the internet because they aren’t in Nexus.

Getting tools into Nexus is slow and confusing (RJ’s feedback).

New image builds are blocked: the ACR we used had public network access disabled, and it isn’t the registry used by the new AKS clusters.

I’ve started moving all agent pools from old AKS to the new clusters. Once that’s done, we’ll decommission the old ones and have a clear view of which images/versions the agents actually use.

What “good” looks like

A single, versioned Standard ADO Container Image with the common tools our builds need.

No internet egress during builds—everything comes from Nexus/ACR.

Clear line in the sand: we own the standard image. Teams that need extras layer them on top and own those additions.

Documented, repeatable build process with SBOM, image signing, and scanning.

Work plan
1) Foundations (AKS/ACR/Agents)

Finish moving all agent pools to the new AKS; smoke test key pipelines.

Pick the “one true” ACR; fix network rules/private endpoints; wire AKS pull permissions.

Decommission the old clusters.

2) Learn what we really use

Pull a list of the most common tools and versions across agents and ADO projects.

Propose the contents of Standard Image v1 and a simple update policy (monthly patch, emergency CVEs).

3) Build the standard image

Create a YAML pipeline that builds from Dockerfile using only Nexus/ACR (fails if it goes to the internet).

Add SBOM generation, image signing, and a container scan gate.

Tagging/retention and rollback plan in place.

4) Fix the Nexus bottleneck

Agree a fast path for popular tools (templates, owners, clear SLA).

Set up internal mirrors (npm/Maven/PyPI) so we’re not requesting one-offs.

Clean repo layout and stable service accounts; basic monitoring/alerts.

5) Rollout and docs

Publish a reference repo and sample pipeline using the standard image.

Write short how-tos: “use the standard image,” “add your own tool,” “request a new tool.”

Announce the support boundary and migration dates; run office hours.

Success measures

0 internet calls during builds.

≥95% build success; build time improves.

Common tool updates available in ≤3 days via Nexus.

80% of pipelines using the standard image.

Risks (and how we handle them)

Nexus delays: fast path + mirrors.

Edge cases: teams layer custom tools on top (they own them).

Registry/network gotchas: lock configs in IaC and add checks in the pipeline.

What’s happening this week

Finish agent pool moves and confirm AKS ↔ ACR pulls.

Publish the “top tools & versions” list.

Draft Standard Image v1 for sign-off.

Stand up the new image pipeline (no egress, SBOM, signing).

Share the support boundary and the pilot plan.

Ownership:

Lead/coordination — Name

AKS/ACR — Name

Nexus/packaging — Name

Security — Name

Pilot teams — Names
