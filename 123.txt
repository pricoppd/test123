
<#
.SYNOPSIS
  Classify Azure DevOps pipelines (YAML & classic) as Prod vs Non-Prod.

.DESCRIPTION
  - Requires Azure CLI + azure-devops extension.
  - Authenticates via 'az login' or a service principal.
  - Looks for "prod" in path/variables/tags/env names.

.PARAMETER OrgUrl
  Your Azure DevOps org URL, e.g. https://dev.azure.com/YourOrg

.EXAMPLE
  .\Classify-Pipelines.ps1 -OrgUrl https://dev.azure.com/YourOrg
#>

param(
  [Parameter(Mandatory)]
  [string] $OrgUrl
)

# ────────────────────────────────────────────────────────────────────────────────
# Prerequisites
#   az extension add --name azure-devops
#   az login
# ────────────────────────────────────────────────────────────────────────────────

# point CLI at your org
az devops configure --defaults organization=$OrgUrl > $null

# fetch all project names
$projects = az devops project list `
  --query "value[].name" -o tsv

# output CSV header
"Project,Type,ID,Name,Prod?,Marker"

foreach ($proj in $projects) {
  # — 1) YAML pipelines —
  $yamlList = az pipelines list --project $proj --query "value" -o json | ConvertFrom-Json
  foreach ($pipe in $yamlList) {
    $id    = $pipe.id
    $name  = $pipe.name
    # fetch to get configuration.path
    $det   = az pipelines show --project $proj --id $id | ConvertFrom-Json
    $path  = $det.configuration.path
    $isProd= if ($path -match '(?i)prod') { 'Prod' } else { 'Non-Prod' }
    $marker= $path
    "$proj,YAML,$id,`"$name`",$isProd,`"$marker`""
  }

  # — 2) Classic Build definitions —
  $builds = az pipelines build definition list --project $proj -o json | ConvertFrom-Json
  foreach ($bd in $builds) {
    $id     = $bd.id
    $name   = $bd.name
    $folder = $bd.path
    $envVar = if ($bd.variables.Environment) { $bd.variables.Environment.value } else { '' }
    $tags   = if ($bd.tags) { ($bd.tags -join ';') } else { '' }
    $marker = ($folder, $envVar, $tags | Where-Object { $_ }) -join ';'
    $isProd = if (
      ($folder -match '(?i)prod') -or 
      ($envVar  -match '(?i)prod') -or 
      ($tags    -match '(?i)prod')
    ) { 'Prod' } else { 'Non-Prod' }
    "$proj,Build,$id,`"$name`",$isProd,`"$marker`""
  }

  # — 3) Classic Release definitions —
  $releases = az pipelines release definition list --project $proj -o json | ConvertFrom-Json
  foreach ($rd in $releases) {
    $id      = $rd.id
    $name    = $rd.name
    $envNames= $rd.environments | ForEach-Object { $_.name }
    $marker  = $envNames -join ';'
    $isProd  = if ($envNames -match '(?i)prod') { 'Prod' } else { 'Non-Prod' }
    "$proj,Release,$id,`"$name`",$isProd,`"$marker`""
  }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



# Retrieve required environment variables (set these in your Function App Application Settings)
$organization = $env:DEVOPS_ORGANIZATION    # e.g., "myorg"
$pat = $env:DEVOPS_PAT                      # Your Personal Access Token

# Validate environment variables are set
if (-not $organization -or -not $pat) {
    Write-Error "DEVOPS_ORGANIZATION and DEVOPS_PAT must be set in application settings."
    exit 1
}

# Prepare the authentication header for Azure DevOps REST API
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$pat"))
$authHeader = @{ Authorization = "Basic $base64AuthInfo" }

# Define the base API version and URL 
$apiVersion = "6.0"
$projectsApiUrl = "https://dev.azure.com/$organization/_apis/projects?api-version=$apiVersion"

try {
    # Retrieve all projects in the organization
    $projectsResponse = Invoke-RestMethod -Uri $projectsApiUrl -Method Get -Headers $authHeader
    $projects = $projectsResponse.value
    Write-Output "Retrieved $($projects.Count) projects from organization '$organization'."
}
catch {
    Write-Error "Error retrieving projects: $_"
    exit 1
}

# Loop through each project to get successful build runs and their logs
foreach ($project in $projects) {
    $projectName = $project.name
    Write-Output "Processing project: $projectName"

    # URL to get builds for the project.
    # The filters:
    #   statusFilter=completed ensures only finished builds are returned.
    #   resultFilter=succeeded ensures only succeeded runs are returned.
    $buildsApiUrl = "https://dev.azure.com/$organization/$projectName/_apis/build/builds?statusFilter=completed&resultFilter=succeeded&api-version=$apiVersion"
    
    try {
        $buildsResponse = Invoke-RestMethod -Uri $buildsApiUrl -Method Get -Headers $authHeader
        $builds = $buildsResponse.value
        Write-Output "  Found $($builds.Count) successful build(s) in project '$projectName'."
    }
    catch {
        Write-Error "Error retrieving builds for project '$projectName': $_"
        continue
    }

    # Process each successful build
    foreach ($build in $builds) {
        $buildId = $build.id
        Write-Output "  Retrieving logs for Build ID: $buildId"

        # URL to get logs (list of log files) for the build
        $logsApiUrl = "https://dev.azure.com/$organization/$projectName/_apis/build/builds/$buildId/logs?api-version=$apiVersion"
        
        try {
            $logsResponse = Invoke-RestMethod -Uri $logsApiUrl -Method Get -Headers $authHeader
        }
        catch {
            Write-Error "    Error retrieving logs for Build ID $buildId in project '$projectName': $_"
            continue
        }
        
        # Loop through each log item (each log file may represent one step or task)
        foreach ($logItem in $logsResponse.value) {
            $logId = $logItem.id
            # Retrieve the content of the log
            $logContentUrl = "https://dev.azure.com/$organization/$projectName/_apis/build/builds/$buildId/logs/$logId?api-version=$apiVersion"
            
            try {
                $logContent = Invoke-RestMethod -Uri $logContentUrl -Method Get -Headers $authHeader
                Write-Output "    --- Log for Build $buildId (Log ID: $logId) ---"
                Write-Output $logContent
                Write-Output "    --- End Log ---`n"
            }
            catch {
                Write-Error "    Error retrieving content for log ID $logId for Build ID $buildId: $_"
            }
        }
    }
}

##############################################################################
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
}

provider "azurerm" {
  features {}
}

# Resource Group
resource "azurerm_resource_group" "rg" {
  name     = "rg-umi-eventgrid"
  location = "East US"
}

# User Assigned Managed Identity (UMI)
resource "azurerm_user_assigned_identity" "umi" {
  name                = "umi-example"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
}

# Service Bus Namespace
resource "azurerm_servicebus_namespace" "sbns" {
  name                = "sbnsumiexample"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  sku                 = "Standard"
}

# Service Bus Queue
resource "azurerm_servicebus_queue" "queue" {
  name                = "queueumi"
  resource_group_name = azurerm_resource_group.rg.name
  namespace_name      = azurerm_servicebus_namespace.sbns.name
}

# Role Assignment: Grant the UMI the Service Bus Data Sender role on the namespace
resource "azurerm_role_assignment" "umi_sb_data_sender" {
  scope                = azurerm_servicebus_namespace.sbns.id
  role_definition_name = "Azure Service Bus Data Sender"
  principal_id         = azurerm_user_assigned_identity.umi.principal_id
}

# Event Grid Topic (to publish events)
resource "azurerm_eventgrid_topic" "eg_topic" {
  name                = "egtopicumi"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

# Event Grid Event Subscription using UMI for authentication
resource "azurerm_eventgrid_event_subscription" "eg_subscription" {
  name  = "egs-usiqueue"
  scope = azurerm_eventgrid_topic.eg_topic.id

  destination {
    endpoint_type = "ServiceBusQueue"
    resource_id   = azurerm_servicebus_queue.queue.id
  }

  # This block configures the subscription to use the UMI for AAD token–based auth
  delivery_identity {
    user_assigned_identity_id = azurerm_user_assigned_identity.umi.id
  }

  # Optional filtering configuration; adjust as needed
  filter {
    is_subject_case_sensitive = false
  }

  event_delivery_schema = "EventGridSchema"
}




variable "powerplatform_service_connections" {
  type = list(object({
    name           = string
    environment_id = string
    server_url     = string
  }))
  default = []
}
##################################tenant_id               = "00000000-0000-0000-0000-000000000000"
client_id               = "11111111-1111-1111-1111-111111111111"
client_secret           = "MYCLIENTSECRET"
organization_name       = "myorg"
project_name            = "MyProject"
service_connection_name = "PowerPlatformAADServiceConn"
environment_id          = "ENV_GUID"
server_url              = "https://myorg.crm.dynamics.com"

####################################
create_service_connection.ps1.tpl
#########################################################

variable "tenant_id" {
  type        = string
  description = "Azure AD tenant ID"
}

variable "client_id" {
  type        = string
  description = "Azure AD client ID (service principal)"
}

variable "client_secret" {
  type        = string
  sensitive   = true
  description = "Service principal secret"
}

variable "organization_name" {
  type        = string
  description = "Azure DevOps organization name (e.g. 'myorg' if your DevOps URL is https://dev.azure.com/myorg)"
}

variable "project_name" {
  type        = string
  description = "Azure DevOps project name"
}

variable "service_connection_name" {
  type        = string
  description = "Name of the service connection to create"
}

variable "environment_id" {
  type        = string
  description = "Power Platform environment ID"
}

variable "server_url" {
  type        = string
  description = "Power Platform server URL (e.g. https://myorg.crm.dynamics.com)"
}

######################################################
variable "powerplatform_service_connections" {
  type = list(object({
    name           = string
    environment_id = string
    server_url     = string
  }))
  default = []
}

resource "null_resource" "create_power_platform_service_connections" {
  for_each = { for c in var.powerplatform_service_connections : c.name => c }

  provisioner "local-exec" {
    interpreter = ["/usr/bin/env", "pwsh", "-Command"]

    command = templatefile("${path.module}/create_service_connection.ps1.tpl", {
      tenant_id               = var.tenant_id
      client_id               = var.client_id
      client_secret           = var.client_secret
      organization_name       = var.organization_name
      project_name            = var.project_name
      service_connection_name = each.value.name
      environment_id          = each.value.environment_id
      server_url              = each.value.server_url
    })
  }
}
powerplatform_service_connections = [
  {
    name           = "Connection1"
    environment_id = "env-guid-1"
    server_url     = "https://org1.crm.dynamics.com"
  },
  {
    name           = "Connection2"
    environment_id = "env-guid-2"
    server_url     = "https://org2.crm.dynamics.com"
  }
]

@"
pwsh -NoProfile -NonInteractive -Command '
param(
  [Parameter(Mandatory=$true)][string]$TenantId,
  [Parameter(Mandatory=$true)][string]$ClientId,
  [Parameter(Mandatory=$true)][string]$ClientSecret,
  [Parameter(Mandatory=$true)][string]$OrgName,
  [Parameter(Mandatory=$true)][string]$ProjectName,
  [Parameter(Mandatory=$true)][string]$SvcConnName,
  [Parameter(Mandatory=$true)][string]$PowerEnvId,
  [Parameter(Mandatory=$true)][string]$ServerUrl
)

try {
  Write-Host "Authenticating to Azure DevOps with client credentials..."
  # 1) Request a token from AAD for the DevOps resource
  #    resource = 499b84ac-1321-427f-aa17-267ca6975798
  $tokenUrl = "https://login.microsoftonline.com/$TenantId/oauth2/token"
  $body = @{
    grant_type    = "client_credentials"
    client_id     = $ClientId
    client_secret = $ClientSecret
    resource      = "499b84ac-1321-427f-aa17-267ca6975798"
  }
  $tokenResponse = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body
  $accessToken = $tokenResponse.access_token

  $headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
  }

  # 2) Check if service connection already exists
  $checkUrl = "https://dev.azure.com/$OrgName/$ProjectName/_apis/serviceendpoint/endpoints?api-version=7.0-preview.2"
  $existing = (Invoke-RestMethod -Uri $checkUrl -Method GET -Headers $headers).value | Where-Object { $_.name -eq $SvcConnName }
  if ($existing) {
    Write-Host "Service connection '$SvcConnName' already exists. Skipping creation."
    return
  }

  # 3) Build the request body for a Power Platform service connection
  $bodyObject = @{
    name = $SvcConnName
    type = "powerPlatform"
    url  = $ServerUrl
    authorization = @{
      scheme     = "ServicePrincipal"
      parameters = @{
        TenantId     = $TenantId
        ClientId     = $ClientId
        ClientSecret = $ClientSecret
      }
    }
    data = @{
      EnvironmentId   = $PowerEnvId
      EnvironmentType = "Production"
      ServerUrl       = $ServerUrl
    }
    description = "Service Connection for Power Platform (via AAD client credentials)"
  }
  $jsonBody = $bodyObject | ConvertTo-Json -Depth 10

  # 4) Create the new service connection
  $createUrl = "https://dev.azure.com/$OrgName/$ProjectName/_apis/serviceendpoint/endpoints?api-version=7.0-preview.2"
  $response = Invoke-RestMethod -Uri $createUrl -Method POST -Headers $headers -ContentType "application/json" -Body $jsonBody

  Write-Host "Service connection '$SvcConnName' created successfully."
}
catch {
  Write-Error "Error: $($_.Exception.Message)"
  exit 1
}
' -TenantId '${tenant_id}' `
  -ClientId '${client_id}' `
  -ClientSecret '${client_secret}' `
  -OrgName '${organization_name}' `
  -ProjectName '${project_name}' `
  -SvcConnName '${service_connection_name}' `
  -PowerEnvId '${environment_id}' `
  -ServerUrl '${server_url}'
"@








@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



tenant_id               = "00000000-0000-0000-0000-000000000000"
client_id               = "11111111-1111-1111-1111-111111111111"
client_secret           = "MYCLIENTSECRET"
organization_name       = "myorg"
project_name            = "MyProject"
service_connection_name = "PowerPlatformAADServiceConn"
environment_id          = "ENV_GUID"
server_url              = "https://myorg.crm.dynamics.com"
