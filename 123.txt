
tenant_id               = "00000000-0000-0000-0000-000000000000"
client_id               = "11111111-1111-1111-1111-111111111111"
client_secret           = "MYCLIENTSECRET"
organization_name       = "myorg"
project_name            = "MyProject"
service_connection_name = "PowerPlatformAADServiceConn"
environment_id          = "ENV_GUID"
server_url              = "https://myorg.crm.dynamics.com"

####################################
create_service_connection.ps1.tpl
#########################################################

variable "tenant_id" {
  type        = string
  description = "Azure AD tenant ID"
}

variable "client_id" {
  type        = string
  description = "Azure AD client ID (service principal)"
}

variable "client_secret" {
  type        = string
  sensitive   = true
  description = "Service principal secret"
}

variable "organization_name" {
  type        = string
  description = "Azure DevOps organization name (e.g. 'myorg' if your DevOps URL is https://dev.azure.com/myorg)"
}

variable "project_name" {
  type        = string
  description = "Azure DevOps project name"
}

variable "service_connection_name" {
  type        = string
  description = "Name of the service connection to create"
}

variable "environment_id" {
  type        = string
  description = "Power Platform environment ID"
}

variable "server_url" {
  type        = string
  description = "Power Platform server URL (e.g. https://myorg.crm.dynamics.com)"
}

######################################################
variable "powerplatform_service_connections" {
  type = list(object({
    name           = string
    environment_id = string
    server_url     = string
  }))
  default = []
}

resource "null_resource" "create_power_platform_service_connections" {
  for_each = { for c in var.powerplatform_service_connections : c.name => c }

  provisioner "local-exec" {
    interpreter = ["/usr/bin/env", "pwsh", "-Command"]

    command = templatefile("${path.module}/create_service_connection.ps1.tpl", {
      tenant_id               = var.tenant_id
      client_id               = var.client_id
      client_secret           = var.client_secret
      organization_name       = var.organization_name
      project_name            = var.project_name
      service_connection_name = each.value.name
      environment_id          = each.value.environment_id
      server_url              = each.value.server_url
    })
  }
}
powerplatform_service_connections = [
  {
    name           = "Connection1"
    environment_id = "env-guid-1"
    server_url     = "https://org1.crm.dynamics.com"
  },
  {
    name           = "Connection2"
    environment_id = "env-guid-2"
    server_url     = "https://org2.crm.dynamics.com"
  }
]

@"
pwsh -NoProfile -NonInteractive -Command '
param(
  [Parameter(Mandatory=$true)][string]$TenantId,
  [Parameter(Mandatory=$true)][string]$ClientId,
  [Parameter(Mandatory=$true)][string]$ClientSecret,
  [Parameter(Mandatory=$true)][string]$OrgName,
  [Parameter(Mandatory=$true)][string]$ProjectName,
  [Parameter(Mandatory=$true)][string]$SvcConnName,
  [Parameter(Mandatory=$true)][string]$PowerEnvId,
  [Parameter(Mandatory=$true)][string]$ServerUrl
)

try {
  Write-Host "Authenticating to Azure DevOps with client credentials..."
  # 1) Request a token from AAD for the DevOps resource
  #    resource = 499b84ac-1321-427f-aa17-267ca6975798
  $tokenUrl = "https://login.microsoftonline.com/$TenantId/oauth2/token"
  $body = @{
    grant_type    = "client_credentials"
    client_id     = $ClientId
    client_secret = $ClientSecret
    resource      = "499b84ac-1321-427f-aa17-267ca6975798"
  }
  $tokenResponse = Invoke-RestMethod -Method Post -Uri $tokenUrl -Body $body
  $accessToken = $tokenResponse.access_token

  $headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
  }

  # 2) Check if service connection already exists
  $checkUrl = "https://dev.azure.com/$OrgName/$ProjectName/_apis/serviceendpoint/endpoints?api-version=7.0-preview.2"
  $existing = (Invoke-RestMethod -Uri $checkUrl -Method GET -Headers $headers).value | Where-Object { $_.name -eq $SvcConnName }
  if ($existing) {
    Write-Host "Service connection '$SvcConnName' already exists. Skipping creation."
    return
  }

  # 3) Build the request body for a Power Platform service connection
  $bodyObject = @{
    name = $SvcConnName
    type = "powerPlatform"
    url  = $ServerUrl
    authorization = @{
      scheme     = "ServicePrincipal"
      parameters = @{
        TenantId     = $TenantId
        ClientId     = $ClientId
        ClientSecret = $ClientSecret
      }
    }
    data = @{
      EnvironmentId   = $PowerEnvId
      EnvironmentType = "Production"
      ServerUrl       = $ServerUrl
    }
    description = "Service Connection for Power Platform (via AAD client credentials)"
  }
  $jsonBody = $bodyObject | ConvertTo-Json -Depth 10

  # 4) Create the new service connection
  $createUrl = "https://dev.azure.com/$OrgName/$ProjectName/_apis/serviceendpoint/endpoints?api-version=7.0-preview.2"
  $response = Invoke-RestMethod -Uri $createUrl -Method POST -Headers $headers -ContentType "application/json" -Body $jsonBody

  Write-Host "Service connection '$SvcConnName' created successfully."
}
catch {
  Write-Error "Error: $($_.Exception.Message)"
  exit 1
}
' -TenantId '${tenant_id}' `
  -ClientId '${client_id}' `
  -ClientSecret '${client_secret}' `
  -OrgName '${organization_name}' `
  -ProjectName '${project_name}' `
  -SvcConnName '${service_connection_name}' `
  -PowerEnvId '${environment_id}' `
  -ServerUrl '${server_url}'
"@








@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



tenant_id               = "00000000-0000-0000-0000-000000000000"
client_id               = "11111111-1111-1111-1111-111111111111"
client_secret           = "MYCLIENTSECRET"
organization_name       = "myorg"
project_name            = "MyProject"
service_connection_name = "PowerPlatformAADServiceConn"
environment_id          = "ENV_GUID"
server_url              = "https://myorg.crm.dynamics.com"
