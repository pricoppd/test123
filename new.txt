Write-Host "##[group]TFLint Information"
      Write-Host "This task checks Terraform files using TFLint to ensure best practices and coding standards are followed."
      Write-Host "Working Directory: $(WorkingDirectory)"
      Write-Host "##[endgroup]"

Sure, here are short definitions for `terraform fmt` and `terraform validate`:

1. **`terraform fmt`:**
   - **Purpose:** Enforces consistent formatting in Terraform code.
   - **Description:** `terraform fmt` is a command-line tool that automatically updates and standardizes the formatting of Terraform configuration files to adhere to the official style conventions. It helps maintain a consistent and readable code style across the entire codebase.

2. **`terraform validate`:**
   - **Purpose:** Checks the syntax and validity of Terraform code.
   - **Description:** `terraform validate` is a command used to perform a syntax check on Terraform configuration files. It checks for errors in the code, ensuring that the configuration is correctly written and follows the expected Terraform language syntax. This step is crucial before applying changes to infrastructure to avoid potential issues during deployment.

echo -e "\e[1;31mTerraform plan detected changes. Failing the stage.\e[0m"


- task: PowerShell@2
      displayName: Check Terraform plan changes
      inputs:
        targetType: 'inline'
        script: |
          $terraformOutput = Get-Content -Path '$(System.DefaultWorkingDirectory)/terraform-output.txt' -Raw
          if ($terraformOutput -like "*Terraform will perform*") {
            Write-Error "Terraform plan detected changes. Failing the stage."
            exit 1
          }


- powershell: |
    terraform show -json $(System.DefaultWorkingDirectory)/terraform-output.tfplan > $(System.DefaultWorkingDirectory)/terraform-output.txt
  displayName: 'Save Terraform Plan Output'

- task: PowerShell@2
  displayName: 'Check Node.js version'
  inputs:
    targetType: 'inline'
    script: |
      node --version


- task: Bash@3
  displayName: 'Check Terraform plan changes'
  inputs:
    targetType: 'inline'
    script: |
      terraformOutput=$(cat "$(System.DefaultWorkingDirectory)/terraform-output.txt")

      if [[ $terraformOutput == *"Terraform will perform"* ]]; then
        echo "Terraform plan detected changes. Failing the stage."
        exit 1
      fi


- task: Bash@3
      displayName: 'Check Terraform plan changes'
      inputs:
        targetType: 'inline'
        script: |
          terraformOutput=$(cat "$(System.DefaultWorkingDirectory)/terraform-output.txt")

          if [[ $terraformOutput == *"Terraform will perform"* ]]; then
            echo "Terraform plan detected changes. Failing the stage."
            exit 1
          ```
stages:
- stage: BashOnlyStage
  displayName: 'Bash Only Stage'
  jobs:
  - job: RunBashScript
    displayName: 'Run Bash Script'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Run Bash Script'
      inputs:
        targetType: 'inline'
        script: |
          echo "Hello from Bash task!"
____________________________________________

terraformOutput=$(cat "$(System.DefaultWorkingDirectory)/tfplan")

          if [[ $terraformOutput == *"Terraform will perform"* ]]; then
            echo "Terraform plan detected changes. Failing the stage."
            exit 1
          else
            echo "No Terraform plan changes detected."
          fi

terraform show -no-color -json "$(Build.SourcesDirectory)/$(SourceRepositoryName)/tf.tfplan" > $(Build.ArtifactStagingDirectory)/terraform-output.txt


______________________________________________________________________________________________________

- script: |
    terraform show -no-color -json "$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/tf.tfplan"
    terraform show -no-color -json "$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/tf.tfplan" > $(System.DefaultWorkingDirectory)/terraform-output.txt

    # Check for changes and fail the stage if FailOnChanges is true
    if [[ $(terraform show -no-color -json "$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/tf.tfplan") != "null" && $(parameters.FailOnChanges) == true ]]; then
        echo "Terraform plan detected changes. Failing the stage."
        exit 1
    fi
  displayName: 'Check the Terraform plan'
  workingDirectory: '$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/env'


# Run Terraform plan and save the output to a file
terraform plan -out=tfplan

# Show the plan in text format and save it to a file
terraform show -no-color tfplan > tfplan.txt

# Check if the "No changes" message is present in the output
if ! grep -q "No changes. Your infrastructure matches the configuration." tfplan.txt; then
    echo "Terraform plan detected changes. Failing the stage."
    exit 1
else
    echo "No changes detected in the Terraform plan. Proceeding with the stage."
fi

if [[ ! $terraformOutput == *"No changes. Your infrastructure matches the configuration."* ]]; then
  echo "Terraform plan detected changes. Failing the stage."
  exit 1
fi
_______________________________________________________________________________________________________________________________________________________

trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: 'azure'
  - name: SourceRepositoryName
    value: '$(Build.SourceBranchName)'  # Use the branch name dynamically
    readOnly: true

steps:
- checkout: self
  persistCredentials: true
  clean: true
  displayName: 'Checkout Pull request source branch'

- task: Bash@3
  displayName: 'Check and install Zip'
  script: |
    if [ ! -x "$(command -v zip)" ]; then
      echo "Zip not installed"
      sudo apt-get update
      sudo apt-get install zip -y
    fi
  retryCountOnTaskFailure: 3

- task: Bash@3
  displayName: 'Install pwsh'
  script: |
    sudo apt-get update
    sudo apt-get install -y powershell
  retryCountOnTaskFailure: 3

- task: TerraformInstaller
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: '1.7.1'
    terraformLocation: 'inline'

- task: PowerShell@2
  displayName: 'Terraform fmt check'
  inputs:
    targetType: 'inline'
    script: |
      $output = terraform fmt --recursive
      if (-not $output) {
        Write-Host "terraform fmt found no issues. Moving on."
      } else {
        Write-Error "terraform fmt found issues. Please run terraform fmt locally to format your code and push to your branch."
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'Terraform validate'
  inputs:
    targetType: 'inline'
    script: |
      $validateOutput = terraform validate -json
      if ($validateOutput -eq "[]") {
        Write-Host "terraform validate succeeded. Moving on."
      } else {
        Write-Error "terraform validate failed. Please check the following issues: $($validateOutput -join ', ')"
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'


______________________________________________________________________________________________________________________________________-

trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: 'Azure'
  - name: SourceRepositoryName
    value: '$(Build.SourceBranchName)'  # Use the branch name dynamically
    readOnly: true

steps:
- checkout: self
  persistCredentials: true
  clean: true
  displayName: 'Checkout Pull request source branch'

- task: Bash@3
  displayName: 'Check and install Zip'
  script: |
    if [ ! -x "$(command -v zip)" ]; then
      echo "Zip not installed"
      sudo apt-get update
      sudo apt-get install zip -y
    fi
  retryCountOnTaskFailure: 3

- task: Bash@3
  displayName: 'Install pwsh'
  script: |
    sudo apt-get update
    sudo apt-get install -y powershell
  retryCountOnTaskFailure: 3

- task: TerraformInstaller
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: '1.7.1'
    terraformLocation: 'inline'

- task: PowerShell@2
  displayName: 'Terraform fmt check'
  inputs:
    targetType: 'inline'
    script: |
      $output = terraform fmt --recursive
      if (-not $output) {
        Write-Host "terraform fmt found no issues. Continue..."
      } else {
        Write-Error "terraform fmt found issues. Please run terraform fmt locally to format your code and push to your branch."
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'TFLint Install'
  inputs:
    targetType: 'inline'
    script: |
      wget https://github.com/terraform-linters/tflint/releases/download/v0.29.0/tflint_linux_amd64.zip
      unzip tflint_linux_amd64.zip
      sudo mv tflint /usr/local/bin/
      rm tflint_linux_amd64.zip
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'TFLint check'
  inputs:
    targetType: 'inline'
    script: |
      $tflintOutput = tflint
      if (-not $tflintOutput) {
        Write-Host "TFLint found no issues. Continue..."
      } else {
        Write-Error "TFLint found issues. Please check the following issues: $($tflintOutput -join ', ')"
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

