stages {
        stage("Run Ansible Deployment") {
            steps {
                script {
                    def ansibleVarsFile = readFile('ansible_vars.json')
                    def ansibleVars = new groovy.json.JsonSlurper().parseText(ansibleVarsFile)
                    
                    echo "Available top-level keys in ansibleVars: ${ansibleVars.keySet()}"
                    
                    if(ansibleVars['Applications']) {
                        echo "Available deployment types under 'Applications': ${ansibleVars['Applications'].keySet()}"
                        def deployment = ansibleVars['Applications'][params.deployment_type]
                        
                        if (deployment) {
                            echo "Selected deployment type: ${params.deployment_type}"
                            def extraVars = deployment.DeployExtraVars.collect { key, value -> "$key='$value'" }.join(' ')
                            echo "ExtraVars: ${extraVars}"
                        } else {
                            echo "No deployment found for the specified type under 'Applications': ${params.deployment_type}"
                        }
                    } else {
                        echo "The key 'Applications' was not found in ansibleVars."
                    }
                }
            }
        }
    }
}

###############################################################################################################

#!/bin/bash

INSTANCE_GROUP_NAME=$1
ZONE=$2
INSTANCE_NAME=$3

ZONE="us-central1-a"

# Ask the user to specify the $app value
APP = 'looker'

# List all instance groups in the specified zone matching the pattern
echo "Listing matching instance groups in zone $ZONE:"
INSTANCE_GROUPS=$(gcloud compute instance-groups list --zone=$ZONE --filter="name~gce-instance-template-$APP-*" --format="value(name)")

echo "$INSTANCE_GROUPS"

# Automatically fetch the first VM (instance) in the selected instance group
INSTANCE_NAME=$(gcloud compute instance-groups managed list-instances $INSTANCE_GROUP_NAME --zone=$ZONE --limit=1 --format="value(instance)")

#List all instance groups in a specific zone:
gcloud compute instance-groups list --zone=[ZONE]

#List VMs (instances) in the selected instance group:
gcloud compute instance-groups managed list-instances [INSTANCE_GROUP_NAME] --zone=[ZONE]

#Update metadata on the selected VM:
gcloud compute instances add-metadata [INSTANCE_NAME] --zone=[ZONE] --metadata KEY1=VALUE1,KEY2=VALUE2
