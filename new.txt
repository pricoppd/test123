parameters:
- name: Region
  default: ''
- name: SourceRepositoryName
  default: ''
- name: TfvarsName
  default: ''
- name: StateName
  default: ''

trigger: none

variables:
  - group: 'IaC_General_UKS'
  - name: SourceRepositoryName
    value: ${{ parameters.SourceRepositoryName }}
    readonly: true
  - name: TfvarsName
    value: ${{ parameters.TfvarsName }}
    readonly: true
  - name: StateName
    value: ${{ parameters.StateName }}
    readonly: true




- task: PowerShell@2
  displayName: 'Terraform validate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "##[group]Terraform validate"
      Write-Host "Checks the syntax and validity of Terraform code. It checks for errors in the code, ensuring that the configuration is correctly written."
      Write-Host "Working Directory: $(variables.CustomPath)"
      Write-Host "##[endgroup]"
      
      Write-Host "Run terraform init"
      terraform init -backend=false
      
      Write-Host "Run terraform validate"
      $validationResult = terraform validate -json | ConvertFrom-Json
      
      Write-Host "Check if errors were found"
      if ($validationResult.error_count -gt 0) {
        Write-Error "Errors were found during Terraform validation:"
        $validationResult.diagnostics | ForEach-Object { Write-Error $_.message }
        exit 1
      } else {
        Write-Host "No validation errors found. Proceeding further."
      }
    pwsh: true
    workingDirectory: '$(variables.CustomPath)'





- task: Bash@3
  displayName: 'Install pwsh if not installed'
  script: |
    if [ ! -x "$(command -v pwsh)" ]; then
      echo "Installing PowerShell..."
      sudo apt-get update
      sudo apt-get install -y powershell
    else
      echo "PowerShell is already installed. Continuing to the next step."
    fi
  retryCount: 3



# Run terraform validate
      terraform init -backend=false
      terraform validate -json > validation_result.json
    displayName: 'Run Terraform Validate'

  - script: |
      # Check if errors were found
      if [ -s validation_result.json ]; then
        echo "Errors were found during Terraform validation:"
        cat validation_result.json
        exit 1  # Fail the build
      else
        echo "No errors found. Proceeding further."
      fi
    displayName: 'Check Validation Results'


Write-Host "##[group]TFLint Information"
      Write-Host "This task checks Terraform files using TFLint to ensure best practices and coding standards are followed."
      Write-Host "Working Directory: $(WorkingDirectory)"
      Write-Host "##[endgroup]"




echo -e "\e[1;31mTerraform plan detected changes. Failing the stage.\e[0m"


- task: PowerShell@2
      displayName: Check Terraform plan changes
      inputs:
        targetType: 'inline'
        script: |
          $terraformOutput = Get-Content -Path '$(System.DefaultWorkingDirectory)/terraform-output.txt' -Raw
          if ($terraformOutput -like "*Terraform will perform*") {
            Write-Error "Terraform plan detected changes. Failing the stage."
            exit 1
          }


- powershell: |
    terraform show -json $(System.DefaultWorkingDirectory)/terraform-output.tfplan > $(System.DefaultWorkingDirectory)/terraform-output.txt
  displayName: 'Save Terraform Plan Output'

- task: PowerShell@2
  displayName: 'Check Node.js version'
  inputs:
    targetType: 'inline'
    script: |
      node --version


- task: Bash@3
  displayName: 'Check Terraform plan changes'
  inputs:
    targetType: 'inline'
    script: |
      terraformOutput=$(cat "$(System.DefaultWorkingDirectory)/terraform-output.txt")

      if [[ $terraformOutput == *"Terraform will perform"* ]]; then
        echo "Terraform plan detected changes. Failing the stage."
        exit 1
      fi


- task: Bash@3
      displayName: 'Check Terraform plan changes'
      inputs:
        targetType: 'inline'
        script: |
          terraformOutput=$(cat "$(System.DefaultWorkingDirectory)/terraform-output.txt")

          if [[ $terraformOutput == *"Terraform will perform"* ]]; then
            echo "Terraform plan detected changes. Failing the stage."
            exit 1
          ```
stages:
- stage: BashOnlyStage
  displayName: 'Bash Only Stage'
  jobs:
  - job: RunBashScript
    displayName: 'Run Bash Script'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Run Bash Script'
      inputs:
        targetType: 'inline'
        script: |
          echo "Hello from Bash task!"
____________________________________________

terraformOutput=$(cat "$(System.DefaultWorkingDirectory)/tfplan")

          if [[ $terraformOutput == *"Terraform will perform"* ]]; then
            echo "Terraform plan detected changes. Failing the stage."
            exit 1
          else
            echo "No Terraform plan changes detected."
          fi

terraform show -no-color -json "$(Build.SourcesDirectory)/$(SourceRepositoryName)/tf.tfplan" > $(Build.ArtifactStagingDirectory)/terraform-output.txt


______________________________________________________________________________________________________

- script: |
    terraform show -no-color -json "$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/tf.tfplan"
    terraform show -no-color -json "$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/tf.tfplan" > $(System.DefaultWorkingDirectory)/terraform-output.txt

    # Check for changes and fail the stage if FailOnChanges is true
    if [[ $(terraform show -no-color -json "$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/tf.tfplan") != "null" && $(parameters.FailOnChanges) == true ]]; then
        echo "Terraform plan detected changes. Failing the stage."
        exit 1
    fi
  displayName: 'Check the Terraform plan'
  workingDirectory: '$(Build.SourcesDirectory)/$(parameters.SourceRepositoryName)/env'


# Run Terraform plan and save the output to a file
terraform plan -out=tfplan

# Show the plan in text format and save it to a file
terraform show -no-color tfplan > tfplan.txt

# Check if the "No changes" message is present in the output
if ! grep -q "No changes. Your infrastructure matches the configuration." tfplan.txt; then
    echo "Terraform plan detected changes. Failing the stage."
    exit 1
else
    echo "No changes detected in the Terraform plan. Proceeding with the stage."
fi

if [[ ! $terraformOutput == *"No changes. Your infrastructure matches the configuration."* ]]; then
  echo "Terraform plan detected changes. Failing the stage."
  exit 1
fi
_______________________________________________________________________________________________________________________________________________________

trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: 'azure'
  - name: SourceRepositoryName
    value: '$(Build.SourceBranchName)'  # Use the branch name dynamically
    readOnly: true

steps:
- checkout: self
  persistCredentials: true
  clean: true
  displayName: 'Checkout Pull request source branch'

- task: Bash@3
  displayName: 'Check and install Zip'
  script: |
    if [ ! -x "$(command -v zip)" ]; then
      echo "Zip not installed"
      sudo apt-get update
      sudo apt-get install zip -y
    fi
  retryCountOnTaskFailure: 3

- task: Bash@3
  displayName: 'Install pwsh'
  script: |
    sudo apt-get update
    sudo apt-get install -y powershell
  retryCountOnTaskFailure: 3

- task: TerraformInstaller
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: '1.7.1'
    terraformLocation: 'inline'

- task: PowerShell@2
  displayName: 'Terraform fmt check'
  inputs:
    targetType: 'inline'
    script: |
      $output = terraform fmt --recursive
      if (-not $output) {
        Write-Host "terraform fmt found no issues. Moving on."
      } else {
        Write-Error "terraform fmt found issues. Please run terraform fmt locally to format your code and push to your branch."
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'Terraform validate'
  inputs:
    targetType: 'inline'
    script: |
      $validateOutput = terraform validate -json
      if ($validateOutput -eq "[]") {
        Write-Host "terraform validate succeeded. Moving on."
      } else {
        Write-Error "terraform validate failed. Please check the following issues: $($validateOutput -join ', ')"
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'


______________________________________________________________________________________________________________________________________-

trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: 'Azure'
  - name: SourceRepositoryName
    value: '$(Build.SourceBranchName)'  # Use the branch name dynamically
    readOnly: true

steps:
- checkout: self
  persistCredentials: true
  clean: true
  displayName: 'Checkout Pull request source branch'

- task: Bash@3
  displayName: 'Check and install Zip'
  script: |
    if [ ! -x "$(command -v zip)" ]; then
      echo "Zip not installed"
      sudo apt-get update
      sudo apt-get install zip -y
    fi
  retryCountOnTaskFailure: 3

- task: Bash@3
  displayName: 'Install pwsh'
  script: |
    sudo apt-get update
    sudo apt-get install -y powershell
  retryCountOnTaskFailure: 3

- task: TerraformInstaller
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: '1.7.1'
    terraformLocation: 'inline'

- task: PowerShell@2
  displayName: 'Terraform fmt check'
  inputs:
    targetType: 'inline'
    script: |
      $output = terraform fmt --recursive
      if (-not $output) {
        Write-Host "terraform fmt found no issues. Continue..."
      } else {
        Write-Error "terraform fmt found issues. Please run terraform fmt locally to format your code and push to your branch."
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'TFLint Install'
  inputs:
    targetType: 'inline'
    script: |
      wget https://github.com/terraform-linters/tflint/releases/download/v0.29.0/tflint_linux_amd64.zip
      unzip tflint_linux_amd64.zip
      sudo mv tflint /usr/local/bin/
      rm tflint_linux_amd64.zip
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'TFLint check'
  inputs:
    targetType: 'inline'
    script: |
      $tflintOutput = tflint
      if (-not $tflintOutput) {
        Write-Host "TFLint found no issues. Continue..."
      } else {
        Write-Error "TFLint found issues. Please check the following issues: $($tflintOutput -join ', ')"
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

