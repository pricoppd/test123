trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: 'Azure'
  - name: SourceRepositoryName
    value: '$(Build.SourceBranchName)'
    readOnly: true

steps:
- checkout: self
  persistCredentials: true
  clean: true
  displayName: 'Checkout Pull request source branch'

- task: Bash@3
  displayName: 'Check and install Zip'
  script: |
    if [ ! -x "$(command -v zip)" ]; then
      echo "Zip not installed"
      sudo apt-get update
      sudo apt-get install zip -y
    fi
  retryCount: 3

- task: Bash@3
  displayName: 'Install pwsh'
  script: |
    sudo apt-get update
    sudo apt-get install -y powershell
  retryCount: 3

- task: TerraformInstaller
  displayName: 'Terraform Install'
  inputs:
    terraformVersion: '1.7.1'
    terraformLocation: 'inline'

- task: PowerShell@2
  displayName: 'Terraform fmt check'
  inputs:
    targetType: 'inline'
    script: |
      $output = terraform fmt --recursive
      if (-not $output) {
        Write-Host "terraform fmt found no issues. Continue...."
      } else {
        Write-Error "terraform fmt found issues. Please run terraform fmt locally to format your code and push to your branch."
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'

- task: PowerShell@2
  displayName: 'TFLint Install'
  inputs:
    targetType: 'inline'
    script: |
      wget https://github.com/terraform-linters/tflint/releases/download/v0.29.0/tflint_linux_amd64.zip
      unzip tflint_linux_amd64.zip
      sudo mv tflint /usr/local/bin/
      rm tflint_linux_amd64.zip

- task: PowerShell@2
  displayName: 'TFLint check'
  inputs:
    targetType: 'inline'
    script: |
      $tflintOutput = tflint
      if (-not $tflintOutput) {
        Write-Host "TFLint found no issues. Continue...."
      } else {
        Write-Error "TFLint found issues. Please check the following issues: $($tflintOutput -join ', ')"
      }
  pwsh: true
  workingDirectory: '$(Build.SourcesDirectory)/$(variables.SourceRepositoryName)'


  
  steps:
- script: echo "System.TeamProject: $(System.TeamProject), SourceRepositoryName: $(variables.SourceRepositoryName), Build.SourceBranch: $(Build.SourceBranch)"
  displayName: 'Print Variables'

